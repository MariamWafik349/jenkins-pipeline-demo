pipeline {
    agent any
    environment {
        DOCKER_IMAGE = 'mariamwafik333/hello-app' // Your Docker Hub repository
        DOCKER_TAG = 'v1.0.0' // Version tag for Docker image
        K8S_DEPLOYMENT_FILE = 'k8s/deployment.yaml' // Path to Kubernetes deployment YAML
    }
    stages {
        stage('Checkout') {
            steps {
                // Clone the repository containing application code, Dockerfile, and Kubernetes config
                git branch: 'main', url: 'https://github.com/MariamWafik349/jenkins-pipeline-demo.git' // Replace with your repository URL
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image
                    sh "docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} ."
                }
            }
        }
        stage('Push Docker Image') {
            steps {
                script {
                    // Log in to Docker Hub and push the image
                    withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                        sh "echo ${DOCKER_PASSWORD} | docker login -u ${DOCKER_USERNAME} --password-stdin"
                        sh "docker push ${DOCKER_IMAGE}:${DOCKER_TAG}"
                    }
                }
            }
        }
        stage('Update Kubernetes Deployment YAML') {
            steps {
                script {
                    // Update the image in Kubernetes deployment YAML
                    sh """
                    sed -i 's|image:.*|image: ${DOCKER_IMAGE}:${DOCKER_TAG}|g' ${K8S_DEPLOYMENT_FILE}
                    """
                }
            }
        }
        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Apply the updated deployment YAML to the Kubernetes cluster
                    sh "kubectl apply -f ${K8S_DEPLOYMENT_FILE}"
                }
            }
        }
    }
    post {
        always {
            script {
                // Clean up the Docker environment
                sh "docker logout"
            }
        }
        success {
            echo 'Pipeline completed successfully! The application has been deployed to Kubernetes.'
        }
        failure {
            echo 'Pipeline failed! Check the logs for more details.'
        }
    }
}
